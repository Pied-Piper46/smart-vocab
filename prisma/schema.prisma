generator client {
  provider = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["smart-vocab"]
}

model User {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Authentication fields
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  hashedPassword String?

  // Learning preferences
  dailyGoal          Int     @default(15) // words per day
  sessionDuration    Int     @default(10) // minutes
  preferredLanguage  String  @default("ja") // ja for Japanese
  
  // Progress tracking
  totalWordsLearned  Int     @default(0)
  currentStreak      Int     @default(0)
  longestStreak      Int     @default(0)
  totalStudyTime     Int     @default(0) // minutes

  // Relations
  progress    WordProgress[]
  sessions    LearningSession[]
  achievements UserAchievement[]
  accounts Account[]
  sessions_auth Session[]

  @@map("users")
  @@schema("smart-vocab")
}

model Account {
  id        String @id @default(cuid())
  userId    String
  type      String
  provider  String
  providerAccountId String
  refresh_token String?
  access_token  String?
  expires_at    Int?
  token_type    String?
  scope         String?
  id_token      String?
  session_state String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
  @@schema("smart-vocab")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions_auth")
  @@schema("smart-vocab")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
  @@schema("smart-vocab")
}

model Word {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Word data
  english     String   @unique
  japanese    String
  phonetic    String?  // pronunciation
  partOfSpeech String  // noun, verb, adjective, etc.
  difficulty  Int      @default(1) // 1-5 scale
  frequency   Int      @default(1) // usage frequency ranking

  // Learning context
  examples    WordExample[]
  progress    WordProgress[]

  @@map("words")
  @@schema("smart-vocab")
}

model WordExample {
  id        String @id @default(cuid())
  wordId    String
  english   String
  japanese  String
  difficulty Int   @default(1) // 1-3 (beginner, intermediate, advanced)
  context   String @default("general") // general, business, academic, etc.

  word Word @relation(fields: [wordId], references: [id], onDelete: Cascade)

  @@map("word_examples")
  @@schema("smart-vocab")
}

model WordProgress {
  id       String   @id @default(cuid())
  userId   String
  wordId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Spaced repetition data
  easeFactor      Float   @default(2.5) // SuperMemo algorithm
  interval        Int     @default(1)   // days until next review
  repetitions     Int     @default(0)
  nextReviewDate  DateTime @default(now())
  
  // Performance tracking
  totalReviews    Int     @default(0)
  correctAnswers  Int     @default(0)
  streak          Int     @default(0)
  lastAnswerCorrect Boolean @default(false)
  
  // Status
  status          String  @default("new") // new, learning, reviewing, mastered
  previousStatus  String? // previous status for change detection

  user User @relation(fields: [userId], references: [id], onDelete: Cascade) 
  word Word @relation(fields: [wordId], references: [id], onDelete: Cascade)

  @@unique([userId, wordId])
  @@map("word_progress")
  @@schema("smart-vocab")
}

model LearningSession {
  id        String   @id @default(cuid())
  userId    String
  createdAt DateTime @default(now())

  // Minimal session info
  wordsStudied   Int      @default(15) // typically 15 words per session
  completedAt    DateTime // session completion time (required)
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("learning_sessions")
  @@schema("smart-vocab")
}

model Achievement {
  id          String @id @default(cuid())
  name        String @unique
  description String
  icon        String
  category    String // streak, volume, accuracy, speed, etc.
  requirement Int    // threshold value
  isActive    Boolean @default(true)

  users UserAchievement[]

  @@map("achievements")
  @@schema("smart-vocab")
}

model UserAchievement {
  id           String   @id @default(cuid())
  userId       String
  achievementId String
  unlockedAt   DateTime @default(now())

  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievement Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)

  @@unique([userId, achievementId])
  @@map("user_achievements")
  @@schema("smart-vocab")
}